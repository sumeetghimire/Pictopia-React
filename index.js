import React, { useEffect, useRef, useState } from 'react'; const Pictopia = ({ thumbnail = true, displayPerRow = 3, images }) => { const pictopiaRef = useRef(null); const [currentIndex, setCurrentIndex] = useState(0); const [zoomLevel, setZoomLevel] = useState(1); const [showPictopia, setShowPictopia] = useState(false); useEffect(() => { const galleryCSS = ` <style> .Pictopia { display: grid; grid-template-columns: repeat(${displayPerRow}, 1fr); gap: 10px; padding: 10px; } @media (max-width: 768px) { .Pictopia { grid-template-columns: 1fr; } } .Pictopia img { width: 100%; height: auto; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); transition: transform 0.2s ease-in-out; } .Pictopia img:hover { transform: scale(1.05); cursor: pointer; } .pictopia { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.9); display: ${showPictopia ? 'flex' : 'none'}; justify-content: center; align-items: center; z-index: 9999; flex-direction: column; } .pictopia img { max-width: 90%; max-height: 60%; object-fit: contain; border-radius: 10px; margin: auto; position: relative; transition: transform 0.4s ease-in-out; } .pictopia .close, .pictopia .prev, .pictopia .next, .pictopia .zoom-in, .pictopia .zoom-out { position: absolute; color: white; font-size: 30px; cursor: pointer; z-index: 10000; } .pictopia .close { top: 20px; right: 20px; } .pictopia .prev, .pictopia .next { top: 50%; transform: translateY(-50%); } .pictopia .prev { left: 30px; } .pictopia .next { right: 30px; } .pictopia .zoom-in { bottom: 50px; right: 80px; } .pictopia .zoom-out { bottom: 50px; right: 30px; } @keyframes zoomIn { 0% { transform: scale(0); } 100% { transform: scale(1); } } .pictopia img.zoomIn { animation: zoomIn 0.4s forwards; } .thumbnails { display: flex; justify-content: flex-start; margin-top: 20px; gap: 10px; position: absolute; bottom: 80px; left: 0; right: 0; overflow-x: auto; scroll-snap-type: x mandatory; padding: 10px; } .thumbnails img { width: 100px; height: 60px; object-fit: cover; cursor: pointer; transition: transform 0.2s ease-in-out, opacity 0.3s ease-in-out; opacity: 0.5; scroll-snap-align: start; } .thumbnails img.active { opacity: 1; transform: scale(1.1); } .thumbnails img:hover { transform: scale(1.05); } </style> `; const styleElement = document.createElement('div'); styleElement.innerHTML = galleryCSS; document.head.appendChild(styleElement); createGallery(); return () => { document.head.removeChild(styleElement); }; }, [showPictopia, currentIndex, zoomLevel]); const createGallery = () => { const galleryDiv = pictopiaRef.current; if (!galleryDiv) return; const imageElements = galleryDiv.querySelectorAll('img'); imageElements.forEach((image, index) => { image.addEventListener('click', () => { setCurrentIndex(index); setZoomLevel(1); setShowPictopia(true); }); }); }; const closePictopia = () => setShowPictopia(false); const handlePrev = () => setCurrentIndex((prevIndex) => (prevIndex - 1 + images.length) % images.length); const handleNext = () => setCurrentIndex((prevIndex) => (prevIndex + 1) % images.length); const handleZoomIn = () => setZoomLevel((prevZoom) => prevZoom + 0.2); const handleZoomOut = () => setZoomLevel((prevZoom) => Math.max(prevZoom - 0.2, 0.2)); return ( <div> <div className="Pictopia" ref={pictopiaRef}> {images.map((src, index) => ( <img key={index} src={src} alt={`Image ${index + 1}`} /> ))} </div> {showPictopia && ( <div className="pictopia"> <span className="close" onClick={closePictopia}>&times;</span> <span className="prev" onClick={handlePrev}>&#10094;</span> <img className="pictopia-image" src={images[currentIndex]} alt="" style={{ transform: `scale(${zoomLevel})` }} /> <span className="next" onClick={handleNext}>&#10095;</span> <span className="zoom-in" onClick={handleZoomIn}>+</span> <span className="zoom-out" onClick={handleZoomOut}>-</span> {thumbnail && ( <div className="thumbnails"> {images.map((imageSrc, index) => ( index !== currentIndex && ( <img key={index} src={imageSrc} onClick={() => setCurrentIndex(index)} className={currentIndex === index ? 'active' : ''} alt={`Thumbnail ${index + 1}`} /> ) ))} </div> )} </div> )} </div> ); }; export default Pictopia; 